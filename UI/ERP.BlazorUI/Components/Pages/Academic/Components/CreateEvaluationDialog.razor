@using ERP.Domain.Core.Entity
@using FluentValidation
@using ERP.Application.AcademicApp.Modules
@using ERP.Application.AcademicApp.Modules.Interfaces

@inject ICreateAnEvaluationToAModuleOfferingUseCase CreateAnEvaluationToAModuleOfferingUseCase

<MudCard>
    <MudForm Model="@model" @ref="@form" Validation="@(evaluationValidator.ValidateValue)"
             ValidationDelay="0">
        <MudCardContent>
            <MudTextField @bind-Value="model.Name"
                          For="@(() => model.Name)"
                          Immediate="true"
                          Label="Name" />

            <MudNumericField @bind-Value="model.Type"
                             For="@(() => model.Type)"
                             Immediate="true"
                             Label="Type" />

            <MudNumericField @bind-Value="model.FinalMarks"
                             For="@(() => model.FinalMarks)"
                             Immediate="true"
                             Label="Final Marks" />

            <MudNumericField @bind-Value="model.Marks"
                             For="@(() => model.Marks)"
                             Immediate="true"
                             Label="Marks" />

        </MudCardContent>
    </MudForm>
    <MudCardActions>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   Class="ml-auto"
                   OnClick="@(async () => await Submit())">Add</MudButton>
    </MudCardActions>
</MudCard>

@code {
    [Parameter]
    public int ModuleOfferingId { get; set; }
    [Parameter]
    public EventCallback onAdded { get; set; }
    
    private Evaluation model = new Evaluation();

    EvaluationModelValidator evaluationValidator = new EvaluationModelValidator();
    MudForm form;

    public class EvaluationModelValidator : AbstractValidator<Evaluation>
    {
        public EvaluationModelValidator()
        {
            RuleFor(x => x.Name)
                .NotEmpty()
                .Length(1, 100);

            RuleFor(x => x.Type)
                .InclusiveBetween(1,5);

            RuleFor(x => x.FinalMarks)
                .InclusiveBetween(0, 100); // Assuming marks are out of 100

            RuleFor(x => x.Marks)
                .InclusiveBetween(0, 100); // Same assumption as above
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<Evaluation>
                                .CreateWithOptions((Evaluation)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }
    
    private async Task Submit()
    {
        await form.Validate();

        if (form.IsValid)
        {
            await CreateAnEvaluationToAModuleOfferingUseCase.ExecuteAsync(model,ModuleOfferingId);
            await onAdded.InvokeAsync();
        }
    }

}