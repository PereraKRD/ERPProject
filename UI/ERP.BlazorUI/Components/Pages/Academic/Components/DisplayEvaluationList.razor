@using ERP.Domain.Core.Entity
@using ERP.Application.AcademicApp.Modules
@using ERP.Application.AcademicApp.Modules.Interfaces
@inject IDialogService DialogService
@inject IDeleteEvaluationUseCase DeleteEvaluationUseCase
@inject IGetModuleOfferingByIdUseCase GetModuleOfferingByIdUseCase
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<h3>DisplayEvaluationList</h3>

<MudTable Items="@_evaluations">
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Type</MudTh>
            <MudTh>Out of Final Marks</MudTh>
            <MudTh>Total Marks Given</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">
                <MudButton OnClick="@(() => ViewEvaluationInformation(ModuleOfferingId, @context.EvaluationId))"> @context.Name</MudButton>
            </MudTd>
            <MudTd DataLabel="Type">@context.Type</MudTd>
            <MudTd DataLabel="Out of Final Marks">@context.FinalMarks</MudTd>
            <MudTd DataLabel="Total Marks Given">@context.Marks</MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="@( () => EditEvaluation(context) )" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@( () => DeleteEvaluation(context.EvaluationId) )" />
            </MudTd>
        </RowTemplate>
    </MudTable>

@code {
    [Parameter]
    public int ModuleOfferingId { get; set; }

    public ModuleOffering ModuleOffering;
    
    private List<Evaluation> _evaluations = new List<Evaluation>();
    
    protected override async Task OnInitializedAsync()
    {
        ModuleOffering = await GetModuleOfferingByIdUseCase.ExecuteAsync(ModuleOfferingId);
         _evaluations = ModuleOffering.Evalutions.ToList();
    }
    
    
    async Task EditEvaluation(Evaluation evaluation)
    {
        var parameters = new DialogParameters { ["evaluation"] = evaluation };
        var dialog = DialogService.Show<EditEvaluationdialog>("Edit Evaluation", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is true)
        {
             await RefreshEvaluations();
        }
    }
    
     async Task RefreshEvaluations()
    {
        ModuleOffering = await GetModuleOfferingByIdUseCase.ExecuteAsync(ModuleOfferingId);
        _evaluations = ModuleOffering.Evalutions.ToList();
        StateHasChanged(); 
    }

    async Task DeleteEvaluation(int evaluationId)
    {
        var parameters = new DialogParameters { ["EvaluationId"] = evaluationId };
        var dialog = DialogService.Show<ConfirmEvaluationDeleteDialog>("Confirm Delete", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is true)
        {
            await RefreshEvaluations();
        }
    }
    
    private void ViewEvaluationInformation(int moduleOfferingId,int evaluationId)
    {
        NavigationManager.NavigateTo($"/ModuleManagementTabs/{moduleOfferingId}/{evaluationId}");
    }


}