@page "/ModuleListPage"
@using ERP.Domain.Core.Entity
@using Microsoft.AspNetCore.Components.Authorization
@using ERP.Application.AcademicApp.Modules.Interfaces
@inject IViewTeacherModuleByNameUseCase ViewTeacherModuleByNameUseCase
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<h3>Module Offerings</h3>

<MudExpansionPanels MultiExpansion="true">
    @foreach (var semester in Enumerable.Range(1, 8))
    {
        <MudExpansionPanel Text=@($"Semester {semester:D2}") MaxHeight="1000">
            <div class="mt-4">
                @foreach (var moduleOffering in _moduleOfferings)
                {
                    if (moduleOffering.Module.Semester == $"semester {semester:00}")
                    {
                        <div>
                            <button @onclick="() => ViewModuleInformation(moduleOffering.ModuleOfferingId)">
                                @moduleOffering.Module.Name
                            </button>
                        </div>
                    }
                }
            </div>
        </MudExpansionPanel>
    }
</MudExpansionPanels>

@code {
    private List<ModuleOffering> _moduleOfferings = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadModulesAsync();
    }

    private async Task LoadModulesAsync()
    {
        var teacherId = 1;
        _moduleOfferings = (await ViewTeacherModuleByNameUseCase.ExecuteAsync(teacherId)).ToList();
    }
    
    private void ViewModuleInformation(int moduleOfferingId)
    {
        NavigationManager.NavigateTo($"/ModuleManagementTabs/{moduleOfferingId}");
    }
}


@* @using ERP.Domain.Core.Entity; *@
@* @using ERP.Application.AcademicApp.Modules.Interfaces *@
@* @using Microsoft.AspNetCore.Components.Authorization *@
@* *@
@* @inject NavigationManager NavigationManager *@
@* @inject IViewAllModuleByNameUseCase ViewAllModuleByNameUseCase *@
@* @inject AuthenticationStateProvider authenticationStateProvider *@
@* *@
@* <MudSelect @bind-Value="@selectedSemester" onselectionchange= "@OnSemesterChange(selectedSemester)"> *@
@*     @foreach (var semester in Semesters) *@
@*     { *@
@*         <MudSelectItem Value="@semester">@semester</MudSelectItem> *@
@*     } *@
@* </MudSelect> *@
@* *@
@* <MudTable Items="@_modules"> *@
@*     <HeaderContent> *@
@*         <MudTh>Name</MudTh> *@
@*         <MudTh>Code</MudTh> *@
@*         <MudTh>Semester</MudTh> *@
@*     </HeaderContent> *@
@*     <RowTemplate> *@
@*         <MudTd DataLabel="Nr">@context.Name</MudTd> *@
@*         <MudTd DataLabel="Sign">@context.Code</MudTd> *@
@*         <MudTd DataLabel="Name">@context.Semester</MudTd> *@
@*     </RowTemplate> *@
@*     <PagerContent> *@
@*         <MudTablePager /> *@
@*     </PagerContent> *@
@* </MudTable> *@
@* *@
@* @code { *@
@*     private List<Module> _modules = new List<Module>(); *@
@*     private List<string> Semesters = new List<string> { "semester 01", "semester 02", "semester 03", "semester 04" }; *@
@*     private string selectedSemester = "semester 01"; *@
@* *@
@*     protected override async Task OnInitializedAsync() *@
@*     { *@
@*         await LoadModulesAsync(); *@
@*     } *@
@* *@
@*     private async Task LoadModulesAsync() *@
@*     { *@
@*         _modules = (await ViewAllModuleByNameUseCase.ExecuteAsync(selectedSemester)).ToList(); *@
@* *@
@*     } *@
@*     private async Task OnSemesterChange(string value) *@
@*     { *@
@*         //if (selectedSemester == value) return; *@
@*         selectedSemester = value; *@
@*         Console.WriteLine($"Selected Semester changed to: {selectedSemester}"); *@
@*         await LoadModulesAsync(); *@
@*     } *@
@* } *@